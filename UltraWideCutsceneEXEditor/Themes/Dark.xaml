<ResourceDictionary x:Name="Dark" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:toolkit="http://schemas.xceed.com/wpf/xaml/toolkit">

    <!-- Brushes -->
    <SolidColorBrush x:Key="MainWindowSidePanelColour" Color="#181818"/>
    <SolidColorBrush x:Key="PrimaryTextColour" Color="LightBlue"/>
    <SolidColorBrush x:Key="SecondaryTextColour" Color="LightBlue"/>
    <SolidColorBrush x:Key="ThirdTextColour" Color="White"/>
    <SolidColorBrush x:Key="PrimaryBackground" Color="#202020"/>
    <SolidColorBrush x:Key="FrameBorderColour" Color="#454545"/>
    <SolidColorBrush x:Key="PrimaryButtonColour" Color="#252525"/>
    <SolidColorBrush x:Key="SecondaryButtonColour" Color="#282828"/>
    <SolidColorBrush x:Key="ComboBoxBackground" Color="LightBlue"/>
    <SolidColorBrush x:Key="AccentColour" Color="#FA8026"/>
    <SolidColorBrush x:Key="ListboxBackgroundColour" Color="#353535"/>
    <SolidColorBrush x:Key="TextboxBackgroundColour" Color="#505050"/>
    <SolidColorBrush x:Key="RichTextboxBackgroundColour" Color="#AAAAAA"/>


    <!-- Grid Styles -->
    <Style x:Key="DefaultGrid" TargetType="Grid">
        <Setter Property="Background" Value="{DynamicResource PrimaryBackground}"/>
    </Style>

    <Style x:Key="WindowSideMenu" TargetType="Grid">
        <Setter Property="Background" Value="{DynamicResource MainWindowSidePanelColour}"/>
    </Style>

    <Style x:Key="BorderApplicationInfo" TargetType="Border">
        <Setter Property="CornerRadius" Value="20"/>
        <Setter Property="BorderBrush" Value="Black"/>
        <Setter Property="Background" Value="{DynamicResource SecondaryButtonColour}"/>
        <Setter Property="BorderThickness" Value="1.5"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="Margin" Value="15,0,0,0"/>
    </Style>



    <!-- Labels Bold Primary Color -->
    <Style x:Key="BoldSize10PrimaryTextColour" TargetType="Label" BasedOn="{StaticResource {x:Type Label}}">
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextColour}"/>
        <Setter Property="FontSize" Value="10"/>
        <Setter Property="FontWeight" Value="Bold"/>
    </Style>

    <Style x:Key="BoldSize11PrimaryTextColour" TargetType="Label" BasedOn="{StaticResource {x:Type Label}}">
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextColour}"/>
        <Setter Property="FontSize" Value="11"/>
        <Setter Property="FontWeight" Value="Bold"/>
    </Style>

    <Style x:Key="BoldSize12PrimaryTextColour" TargetType="Label" BasedOn="{StaticResource {x:Type Label}}">
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextColour}"/>
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="FontWeight" Value="Bold"/>
    </Style>

    <Style x:Key="BoldSize14PrimaryTextColour" TargetType="Label" BasedOn="{StaticResource {x:Type Label}}">
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextColour}"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="FontWeight" Value="Bold"/>
    </Style>

    <Style x:Key="BoldSize16PrimaryTextColour" TargetType="Label" BasedOn="{StaticResource {x:Type Label}}">
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextColour}"/>
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="FontWeight" Value="Bold"/>
    </Style>


    <!-- Labels Regular Primary Color -->
    <Style x:Key="RegularSize10PrimaryTextColour" TargetType="Label" BasedOn="{StaticResource {x:Type Label}}">
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextColour}"/>
        <Setter Property="FontSize" Value="10"/>
    </Style>

    <Style x:Key="RegularSize11PrimaryTextColour" TargetType="Label" BasedOn="{StaticResource {x:Type Label}}">
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextColour}"/>
        <Setter Property="FontSize" Value="11"/>
    </Style>

    <Style x:Key="RegularSize12PrimaryTextColour" TargetType="Label" BasedOn="{StaticResource {x:Type Label}}">
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextColour}"/>
        <Setter Property="FontSize" Value="12"/>
    </Style>

    <Style x:Key="RegularSize14PrimaryTextColour" TargetType="Label" BasedOn="{StaticResource {x:Type Label}}">
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextColour}"/>
        <Setter Property="FontSize" Value="14"/>
    </Style>

    <Style x:Key="RegularSize16PrimaryTextColour" TargetType="Label" BasedOn="{StaticResource {x:Type Label}}">
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextColour}"/>
        <Setter Property="FontSize" Value="16"/>
    </Style>


    <!-- Labels Italic Bold Primary Color -->
    <Style x:Key="ItalicSize10PrimaryTextColour" TargetType="Label" BasedOn="{StaticResource {x:Type Label}}">
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextColour}"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="FontStyle" Value="Italic"/>
        <Setter Property="FontSize" Value="10"/>
    </Style>

    <Style x:Key="ItalicSize12PrimaryTextColour" TargetType="Label" BasedOn="{StaticResource {x:Type Label}}">
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextColour}"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="FontStyle" Value="Italic"/>
        <Setter Property="FontSize" Value="12"/>
    </Style>

    <Style x:Key="ItalicSize14PrimaryTextColour" TargetType="Label" BasedOn="{StaticResource {x:Type Label}}">
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextColour}"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="FontStyle" Value="Italic"/>
        <Setter Property="FontSize" Value="14"/>
    </Style>

    <Style x:Key="ItalicSize16PrimaryTextColour" TargetType="Label" BasedOn="{StaticResource {x:Type Label}}">
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextColour}"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="FontStyle" Value="Italic"/>
        <Setter Property="FontSize" Value="16"/>
    </Style>


    <!-- Textblock Regular Primary Color-->
    <Style x:Key="DefaultTextBlockNoBold_8" TargetType="TextBlock" BasedOn="{StaticResource {x:Type TextBlock}}">
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextColour}"/>
        <Setter Property="FontSize" Value="8"/>
    </Style>

    <Style x:Key="DefaultTextBlockNoBold_9" TargetType="TextBlock" BasedOn="{StaticResource {x:Type TextBlock}}">
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextColour}"/>
        <Setter Property="FontSize" Value="9"/>
    </Style>

    <Style x:Key="DefaultTextBlockNoBold_10" TargetType="TextBlock" BasedOn="{StaticResource {x:Type TextBlock}}">
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextColour}"/>
        <Setter Property="FontSize" Value="10"/>
    </Style>

    <Style x:Key="DefaultTextBlockNoBold_11" TargetType="TextBlock" BasedOn="{StaticResource {x:Type TextBlock}}">
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextColour}"/>
        <Setter Property="FontSize" Value="11"/>
    </Style>

    <Style x:Key="DefaultTextBlockNoBold_12" TargetType="TextBlock" BasedOn="{StaticResource {x:Type TextBlock}}">
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextColour}"/>
        <Setter Property="FontSize" Value="12"/>
    </Style>

    <Style x:Key="DefaultTextBlockNoBold_14" TargetType="TextBlock" BasedOn="{StaticResource {x:Type TextBlock}}">
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextColour}"/>
        <Setter Property="FontSize" Value="14"/>
    </Style>

    <Style x:Key="DefaultTextBlockNoBold_16" TargetType="TextBlock" BasedOn="{StaticResource {x:Type TextBlock}}">
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextColour}"/>
        <Setter Property="FontSize" Value="16"/>
    </Style>


    <!-- Labels Bold Secondary Color -->
    <Style x:Key="BoldSize10SecondaryTextColour" TargetType="Label" BasedOn="{StaticResource {x:Type Label}}">
        <Setter Property="Foreground" Value="{DynamicResource SecondaryTextColour}"/>
        <Setter Property="FontSize" Value="10"/>
        <Setter Property="FontWeight" Value="Bold"/>
    </Style>

    <Style x:Key="BoldSize11SecondaryTextColour" TargetType="Label" BasedOn="{StaticResource {x:Type Label}}">
        <Setter Property="Foreground" Value="{DynamicResource SecondaryTextColour}"/>
        <Setter Property="FontSize" Value="11"/>
        <Setter Property="FontWeight" Value="Bold"/>
    </Style>

    <Style x:Key="BoldSize12SecondaryTextColour" TargetType="Label" BasedOn="{StaticResource {x:Type Label}}">
        <Setter Property="Foreground" Value="{DynamicResource SecondaryTextColour}"/>
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="FontWeight" Value="Bold"/>
    </Style>

    <Style x:Key="BoldSize14SecondaryTextColour" TargetType="Label" BasedOn="{StaticResource {x:Type Label}}">
        <Setter Property="Foreground" Value="{DynamicResource SecondaryTextColour}"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="FontWeight" Value="Bold"/>
    </Style>

    <Style x:Key="BoldSize16SecondaryTextColour" TargetType="Label" BasedOn="{StaticResource {x:Type Label}}">
        <Setter Property="Foreground" Value="{DynamicResource SecondaryTextColour}"/>
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="FontWeight" Value="Bold"/>
    </Style>


    <!-- Labels Regular Secondary Color -->
    <Style x:Key="RegularSize10SecondaryTextColour" TargetType="Label" BasedOn="{StaticResource {x:Type Label}}">
        <Setter Property="Foreground" Value="{DynamicResource SecondaryTextColour}"/>
        <Setter Property="FontSize" Value="10"/>
    </Style>

    <Style x:Key="RegularSize11SecondaryTextColour" TargetType="Label" BasedOn="{StaticResource {x:Type Label}}">
        <Setter Property="Foreground" Value="{DynamicResource SecondaryTextColour}"/>
        <Setter Property="FontSize" Value="11"/>
    </Style>

    <Style x:Key="RegularSize12SecondaryTextColour" TargetType="Label" BasedOn="{StaticResource {x:Type Label}}">
        <Setter Property="Foreground" Value="{DynamicResource SecondaryTextColour}"/>
        <Setter Property="FontSize" Value="12"/>
    </Style>

    <Style x:Key="RegularSize14SecondaryTextColour" TargetType="Label" BasedOn="{StaticResource {x:Type Label}}">
        <Setter Property="Foreground" Value="{DynamicResource SecondaryTextColour}"/>
        <Setter Property="FontSize" Value="14"/>
    </Style>

    <Style x:Key="RegularSize16SecondaryTextColour" TargetType="Label" BasedOn="{StaticResource {x:Type Label}}">
        <Setter Property="Foreground" Value="{DynamicResource SecondaryTextColour}"/>
        <Setter Property="FontSize" Value="16"/>
    </Style>


    <!-- Labels Italic Bold Secondary Color -->
    <Style x:Key="ItalicSize10SecondaryTextColour" TargetType="Label" BasedOn="{StaticResource {x:Type Label}}">
        <Setter Property="Foreground" Value="{DynamicResource SecondaryTextColour}"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="FontStyle" Value="Italic"/>
        <Setter Property="FontSize" Value="10"/>
    </Style>

    <Style x:Key="ItalicSize12SecondaryTextColour" TargetType="Label" BasedOn="{StaticResource {x:Type Label}}">
        <Setter Property="Foreground" Value="{DynamicResource SecondaryTextColour}"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="FontStyle" Value="Italic"/>
        <Setter Property="FontSize" Value="12"/>
    </Style>

    <Style x:Key="ItalicSize14SecondaryTextColour" TargetType="Label" BasedOn="{StaticResource {x:Type Label}}">
        <Setter Property="Foreground" Value="{DynamicResource SecondaryTextColour}"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="FontStyle" Value="Italic"/>
        <Setter Property="FontSize" Value="14"/>
    </Style>

    <Style x:Key="ItalicSize16SecondaryTextColour" TargetType="Label" BasedOn="{StaticResource {x:Type Label}}">
        <Setter Property="Foreground" Value="{DynamicResource SecondaryTextColour}"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="FontStyle" Value="Italic"/>
        <Setter Property="FontSize" Value="16"/>
    </Style>


    <!-- Textblock Regular Secondary Color-->
    <Style x:Key="SecondaryDefaultTextBlockNoBold_8" TargetType="TextBlock" BasedOn="{StaticResource {x:Type TextBlock}}">
        <Setter Property="Foreground" Value="{DynamicResource SecondaryTextColour}"/>
        <Setter Property="FontSize" Value="8"/>
    </Style>

    <Style x:Key="SecondaryDefaultTextBlockNoBold_9" TargetType="TextBlock" BasedOn="{StaticResource {x:Type TextBlock}}">
        <Setter Property="Foreground" Value="{DynamicResource SecondaryTextColour}"/>
        <Setter Property="FontSize" Value="9"/>
    </Style>

    <Style x:Key="SecondaryDefaultTextBlockNoBold_10" TargetType="TextBlock" BasedOn="{StaticResource {x:Type TextBlock}}">
        <Setter Property="Foreground" Value="{DynamicResource SecondaryTextColour}"/>
        <Setter Property="FontSize" Value="10"/>
    </Style>

    <Style x:Key="SecondaryDefaultTextBlockNoBold_11" TargetType="TextBlock" BasedOn="{StaticResource {x:Type TextBlock}}">
        <Setter Property="Foreground" Value="{DynamicResource SecondaryTextColour}"/>
        <Setter Property="FontSize" Value="11"/>
    </Style>

    <Style x:Key="SecondaryDefaultTextBlockNoBold_12" TargetType="TextBlock" BasedOn="{StaticResource {x:Type TextBlock}}">
        <Setter Property="Foreground" Value="{DynamicResource SecondaryTextColour}"/>
        <Setter Property="FontSize" Value="12"/>
    </Style>

    <Style x:Key="SecondaryDefaultTextBlockNoBold_14" TargetType="TextBlock" BasedOn="{StaticResource {x:Type TextBlock}}">
        <Setter Property="Foreground" Value="{DynamicResource SecondaryTextColour}"/>
        <Setter Property="FontSize" Value="14"/>
    </Style>

    <Style x:Key="SecondaryDefaultTextBlockNoBold_16" TargetType="TextBlock" BasedOn="{StaticResource {x:Type TextBlock}}">
        <Setter Property="Foreground" Value="{DynamicResource SecondaryTextColour}"/>
        <Setter Property="FontSize" Value="16"/>
    </Style>


    <!-- Button Styles -->
    <Style x:Key="DefaultButton" TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="Background" Value="{DynamicResource PrimaryButtonColour}"/>
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextColour}"/>
        <Setter Property="MinHeight" Value="25"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="bg" Background="{TemplateBinding Background}" BorderThickness="1.2" BorderBrush="Black" CornerRadius="3.5">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalAlignment}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" Value="{DynamicResource AccentColour}" TargetName="bg"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="SecondaryButton" TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="Background" Value="{DynamicResource SecondaryButtonColour}"/>
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextColour}"/>
        <Setter Property="MinHeight" Value="25"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="bg" Background="{TemplateBinding Background}" BorderThickness="1.2" BorderBrush="Black" CornerRadius="3.5">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
                           VerticalAlignment="{TemplateBinding VerticalAlignment}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" Value="{DynamicResource AccentColour}" TargetName="bg"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="OtherButton" TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="Background" Value="#FF01203C"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="bg" Background="{TemplateBinding Background}" BorderThickness="1.5" BorderBrush="Black" CornerRadius="20">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalAlignment}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" Value="#FF01203C" TargetName="bg"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="HelpButton" TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="Background" Value="{DynamicResource PrimaryButtonColour}"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="bg" Background="{TemplateBinding Background}" BorderThickness="1.5" BorderBrush="Black" CornerRadius="90">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalAlignment}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" Value="{DynamicResource AccentColour}" TargetName="bg"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="OvalButton" TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="Background" Value="{DynamicResource PrimaryButtonColour}"/>
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextColour}"/>
        <Setter Property="MinHeight" Value="25"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="bg" Background="{TemplateBinding Background}" BorderThickness="1.2" BorderBrush="Black" CornerRadius="20">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalAlignment}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" Value="{DynamicResource AccentColour}" TargetName="bg"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!-- Radio Buttons -->
    <Style x:Key="DefaultRadioButton" TargetType="RadioButton" BasedOn="{StaticResource {x:Type RadioButton}}">
        <Setter Property="Foreground" Value="{DynamicResource ComboBoxBackground}"/>
    </Style>


    <!-- Toggle button styles -->
    <Style x:Key="FocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="2" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type ToggleButton}" x:Key="DefaultToggleButton">
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
        <Setter Property="Background" Value="{DynamicResource PrimaryButtonColour}"/>
        <Setter Property="BorderBrush" Value="Black"/>
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextColour}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" CornerRadius="5" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                        <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Button.IsDefaulted" Value="true">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource AccentColour}"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource PrimaryButtonColour}"/>
                            <Setter Property="BorderBrush" Value="{DynamicResource AccentColour}"/>
                            <Setter Property="Foreground" Value="{DynamicResource AccentColour}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" TargetName="border" Value="0.7"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type ToggleButton}" x:Key="ToggleButtonNoHighlight">
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
        <Setter Property="Background" Value="{DynamicResource PrimaryButtonColour}"/>
        <Setter Property="BorderBrush" Value="Black"/>
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextColour}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" CornerRadius="5" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                        <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Button.IsDefaulted" Value="true">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource AccentColour}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type ToggleButton}" x:Key="OvalToggleButton">
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
        <Setter Property="Background" Value="{DynamicResource PrimaryButtonColour}"/>
        <Setter Property="BorderBrush" Value="Black"/>
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextColour}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" CornerRadius="20" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                        <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Button.IsDefaulted" Value="true">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource AccentColour}"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource PrimaryButtonColour}"/>
                            <Setter Property="BorderBrush" Value="{DynamicResource AccentColour}"/>
                            <Setter Property="Foreground" Value="{DynamicResource AccentColour}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" TargetName="border" Value="0.7"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!-- Rectangle styles -->
    <Style x:Key="DefaultRectangle" TargetType="Rectangle">
        <Setter Property="Fill" Value="{DynamicResource FrameBorderColour}"/>
        <Setter Property="Width" Value="2.5"/>
        <Setter Property="Opacity" Value="0.5"/>
    </Style>

    <Style x:Key="DefaultRectangleHorizontal" TargetType="Rectangle">
        <Setter Property="Fill" Value="{DynamicResource FrameBorderColour}"/>
        <Setter Property="Height" Value="3"/>
        <Setter Property="Opacity" Value="0.5"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
    </Style>


    <!-- Context Menu Styles -->
    <Style x:Key="DefaultContextMenu" TargetType="ContextMenu" BasedOn="{StaticResource {x:Type ContextMenu}}">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Grid.IsSharedSizeScope" Value="true" />
        <Setter Property="HasDropShadow" Value="True" />
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextColour}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContextMenu}">
                    <Border x:Name="Border" Background="{DynamicResource PrimaryBackground}" BorderThickness="2">
                        <Border.BorderBrush>
                            <SolidColorBrush Color="Black"/>
                        </Border.BorderBrush>
                        <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasDropShadow" Value="true">
                            <Setter TargetName="Border" Property="Padding" Value="0,0,0,0" />
                            <Setter TargetName="Border" Property="CornerRadius" Value="3" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!-- Frame Styles -->
    <Style x:Key="GMPediaFrameStyle" TargetType="Frame">
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="BorderBrush" Value="Black"/>
        <Setter Property="Background" Value="{DynamicResource TextboxBackgroundColour}"/>
    </Style>


    <!-- Listbox Styles -->
    <Style x:Key="DefaultListBox" TargetType="ListBox" BasedOn="{StaticResource {x:Type ListBox}}">
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextColour}"/>
        <Setter Property="Margin" Value="0,-10,0,-10"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="BorderBrush" Value="Black"/>
        <Setter Property="BorderThickness" Value="1.5"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBox}">
                    <ScrollViewer x:Name="ScrollViewer" Style="{DynamicResource ListboxThinScrollViewer}">
                        <ItemsPresenter/>
                    </ScrollViewer>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="True"/>
        <Style.Resources>
            <Style TargetType="Border">
                <Setter Property="CornerRadius" Value="5"/>
            </Style>
        </Style.Resources>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="BitmapEffect">
                    <Setter.Value>
                        <OuterGlowBitmapEffect GlowColor="#FFFB621F" GlowSize="4"/>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="FontWeight" Value="Bold"/>
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="Foreground" Value="Black" />
            </Trigger>
        </Style.Triggers>
    </Style>

  

    <!-- Textbox Styles -->
    <Style x:Key="DefaultTextBox" TargetType="TextBox" BasedOn="{StaticResource {x:Type TextBox}}">
        <Setter Property="Background" Value="{DynamicResource TextboxBackgroundColour}"/>
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextColour}"/>
        <Setter Property="Padding" Value="5,0,5,0"/>
        <Setter Property="SpellCheck.IsEnabled" Value="True"/>
        <Setter Property="FontSize" Value="13"/>
        <Setter Property="BorderBrush" Value="Black"/>
        <Setter Property="BorderThickness" Value="1.2"/>
        <Setter Property="VerticalScrollBarVisibility" Value="Auto"/>
        <Style.Resources>
            <Style TargetType="Border">
                <Setter Property="CornerRadius" Value="3.5"/>
            </Style>
        </Style.Resources>
    </Style>

    <Style x:Key="ChatBubbleTextBox" TargetType="TextBox" BasedOn="{StaticResource {x:Type TextBox}}">
        <Setter Property="Background" Value="{DynamicResource ListboxBackgroundColour}"/>
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextColour}"/>
        <Setter Property="Padding" Value="5,0,5,0"/>
        <Setter Property="BorderBrush" Value="Black"/>
        <Setter Property="BorderThickness" Value="1.5"/>
        <Setter Property="Cursor" Value="IBeam"/>
        <Setter Property="FontFamily" Value="Segoe UI Emoji"/>
        <Style.Resources>
            <Style TargetType="Border">
                <Setter Property="CornerRadius" Value="5"/>
            </Style>
        </Style.Resources>
    </Style>

    <Style x:Key="DefaultPasswordBox" TargetType="PasswordBox" BasedOn="{StaticResource {x:Type PasswordBox}}">
        <Setter Property="Background" Value="{DynamicResource ListboxBackgroundColour}"/>
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextColour}"/>
        <Setter Property="BorderBrush" Value="Black"/>
        <Setter Property="BorderThickness" Value="1.5"/>
    </Style>


    <!-- Document Viewer Styles-->
    <Style x:Key="DefaultDocumentViewer" TargetType="DocumentViewer" BasedOn="{StaticResource {x:Type DocumentViewer}}">
        <Setter Property="Background" Value="{DynamicResource ListboxBackgroundColour}"/>
        <Style.Resources>
            <!-- Hides the search box-->
            <Style TargetType="ContentControl">
                <Setter Property="Visibility" Value="Collapsed" />
            </Style>

            <!-- Hides the toolbar -->
            <Style TargetType="ToolBar">
                <Setter Property="Visibility" Value="Collapsed" />
            </Style>
            <Style TargetType="Border">
                <Setter Property="CornerRadius" Value="5"/>
                <Setter Property="BorderThickness" Value="2"/>
                <Setter Property="BorderBrush" Value="Black"/>
            </Style>
        </Style.Resources>
    </Style>


    <!-- Combobox Styles -->
    <Style x:Key="DefaultComboBox" TargetType="ComboBox" BasedOn="{StaticResource {x:Type ComboBox}}">
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="FontSize" Value="13"/>
        <Setter Property="IsReadOnly" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ComboBox">
                    <Grid>
                        <ToggleButton Grid.Column="2" Focusable="false" IsChecked="{Binding Path=IsDropDownOpen,Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}" >
                            <ToggleButton.Template>
                                <ControlTemplate>
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="*" />
                                            <ColumnDefinition Width="25" />
                                        </Grid.ColumnDefinitions>
                                        <Border x:Name="Border"  Grid.ColumnSpan="2" CornerRadius="3.5" Background="{DynamicResource ListboxBackgroundColour}" BorderBrush="Black" BorderThickness="1" />
                                        <Border Grid.Column="0" CornerRadius="5,0,0,5"  Margin="1"  Background="{DynamicResource ComboBoxBackground}" BorderBrush="Black" BorderThickness="0,0,1,0" />
                                        <Path x:Name="Arrow" Grid.Column="1"  Fill="WhiteSmoke" HorizontalAlignment="Center" VerticalAlignment="Center" Data="M 0 0 L 4 4 L 8 0 Z"/>
                                    </Grid>
                                    <ControlTemplate.Triggers>
                                        <Trigger Property="ToggleButton.IsMouseOver" Value="true">
                                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource AccentColour}" />
                                        </Trigger>
                                        <Trigger Property="ToggleButton.IsChecked" Value="true">
                                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource AccentColour}" />
                                        </Trigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </ToggleButton.Template>
                        </ToggleButton>
                        <ContentPresenter Name="ContentSite" IsHitTestVisible="False"  Content="{TemplateBinding SelectionBoxItem}" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" Margin="3"/>
                        <TextBox x:Name="PART_EditableTextBox" Visibility="Hidden" IsReadOnly="{TemplateBinding IsReadOnly}"/>
                        <Popup Name="Popup" Placement="Bottom" IsOpen="{TemplateBinding IsDropDownOpen}" AllowsTransparency="True"  Focusable="False" PopupAnimation="Slide">
                            <Grid  Name="DropDown" SnapsToDevicePixels="True" MinWidth="{TemplateBinding ActualWidth}" MaxHeight="500">
                                <Border x:Name="DropDownBorder" Background="{DynamicResource ComboBoxBackground}" CornerRadius="3.5"/>
                                <ScrollViewer SnapsToDevicePixels="True">
                                    <StackPanel IsItemsHost="True" />
                                </ScrollViewer>
                            </Grid>
                        </Popup>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
        </Style.Triggers>
    </Style>


    <!-- Scrollbars-->
    <Style x:Key="SemiTransparentThinScrollViewer" TargetType="{x:Type ScrollViewer}">
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Margin" Value="0,10,0,10"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>

                        <ScrollContentPresenter Grid.Column="0"/>
                        <ScrollBar Grid.Column="1"
                     Opacity="0.5"
                     Name="PART_VerticalScrollBar"
                     Value="{TemplateBinding VerticalOffset}"
                     Maximum="{TemplateBinding ScrollableHeight}"
                     ViewportSize="{TemplateBinding ViewportHeight}"
                     Width="6"
                     Margin="0,-2,0,-2"
                     Background="{DynamicResource MainWindowSidePanelColour}"
                     MinWidth="5"
                     Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"/>

                        <ScrollBar Name="PART_HorizontalScrollBar"
                     Opacity="0.5"
                     Orientation="Horizontal"
                     Grid.Row="1"
                     Grid.Column="0"
                     Height="6"
                     Background="{DynamicResource MainWindowSidePanelColour}"
                     Value="{TemplateBinding HorizontalOffset}"
                     Maximum="{TemplateBinding ScrollableWidth}"
                     ViewportSize="{TemplateBinding ViewportWidth}"
                     Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ListboxThinScrollViewer" TargetType="{x:Type ScrollViewer}">
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Margin" Value="0,10,0,10"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>

                        <Border Grid.Column="0" BorderBrush="Black" BorderThickness="1" CornerRadius="2.5" Background="{DynamicResource ListboxBackgroundColour}"/>

                        <ScrollContentPresenter Grid.Column="0"/>
                        <ScrollBar Grid.Column="1"
                                  Opacity="1"
                                  Name="PART_VerticalScrollBar"
                                  Value="{TemplateBinding VerticalOffset}"
                                  Maximum="{TemplateBinding ScrollableHeight}"
                                  ViewportSize="{TemplateBinding ViewportHeight}"
                                  Width="6"
                                  Margin="-10,2,0,2"
                                  Background="{DynamicResource ListboxBackgroundColour}"
                                  MinWidth="5"
                                  Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"/>

                        <ScrollBar Name="PART_HorizontalScrollBar"
                               Opacity="1"
                               Orientation="Horizontal"
                               Grid.Row="1"
                               Grid.Column="0"
                               Height="6"
                               Background="{DynamicResource ListboxBackgroundColour}"
                               Value="{TemplateBinding HorizontalOffset}"
                               Maximum="{TemplateBinding ScrollableWidth}"
                               ViewportSize="{TemplateBinding ViewportWidth}"
                               Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>